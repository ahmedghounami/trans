services:
  # === FRONTEND ===
  client:
    build:
      context: .
      dockerfile: ./client/dockerfile
    container_name: client
    env_file: [.env]
    volumes:
      - ./client:/app
      - /app/node_modules
    networks: [transcendence]
    restart: unless-stopped
    ports:
      - "3000:3000"

  # === BACKEND ===
  server:
    build:
      context: .
      dockerfile: ./server/dockerfile
    container_name: server
    env_file: [.env]
    environment:
      - TZ=${TZ}
      - METRICS_PORT=${SERVER_METRICS_PORT}
    volumes:
      - ./server:/var/www/server
      - /var/www/server/node_modules
    networks: [transcendence]
    restart: unless-stopped
    ports:
      - "4000:4000"

  # === NGINX (reverse proxy for frontend + backend + Kibana + Grafana) ===
  nginx:
    build:
      context: .
      dockerfile: ./nginx/dockerfile
    image: nginx:trans
    container_name: nginx
    env_file: [.env]
    depends_on:
      - client
      - server
      - kibana         # ðŸ‘ˆ waits for Kibana before reverse-proxy setup
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
      - nginx_certs:/etc/nginx/ssl
    networks: [transcendence]
    restart: unless-stopped

  # === NGINX Prometheus Exporter ===
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: nginx_exporter
    depends_on:
      - nginx
    command:
      - -nginx.scrape-uri=http://nginx:8080/stub_status
    networks: [transcendence]
    restart: unless-stopped
    ports:
      - "9113:9113"

  # === cAdvisor for container-level metrics ===
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.2
    container_name: cadvisor
    privileged: true
    networks: [transcendence]
    ports:
      - "8088:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped

  # === PROMETHEUS ===
  prometheus:
    build:
      context: ./prometheus
      dockerfile: dockerfile
    container_name: prometheus
    env_file: [.env]
    depends_on:
      - cadvisor
      - nginx-exporter
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks: [transcendence]
    restart: unless-stopped

  # === GRAFANA ===
  grafana:
    build:
      context: ./grafana
      dockerfile: dockerfile
    container_name: grafana
    env_file: [.env]
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks: [transcendence]
    restart: unless-stopped

  # === ELASTICSEARCH ===
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    env_file: [.env]
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - TZ=${TZ}
      # Optional: secure transport between nodes (needed for xpack)
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.http.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks: [transcendence]
    restart: unless-stopped

  # === LOGSTASH ===
  logstash:
    image: docker.elastic.co/logstash/logstash:${ELASTIC_VERSION}
    container_name: logstash
    env_file: [.env]
    depends_on:
      - elasticsearch
    environment:
      - xpack.monitoring.enabled=false
      - LS_JAVA_OPTS=-Xms512m -Xmx512m
      - TZ=${TZ}
    volumes:
      - ./eltk/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - nginx_logs:/var/log/nginx:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    networks: [transcendence]
    restart: unless-stopped

  # === KIBANA ===
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    container_name: kibana
    env_file: [.env]
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_SERVICEACCOUNTTOKEN=${ELASTICSEARCH_SERVICE_TOKEN}
      - SERVER_BASEPATH=/kibana
      - SERVER_PUBLICBASEURL=https://localhost/kibana
      - SERVER_REWRITEBASEPATH=true
      - XPACK_SECURITY_ENCRYPTIONKEY=${KIBANA_SECURITY_ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${KIBANA_ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${KIBANA_REPORTING_ENCRYPTION_KEY}
      - TZ=${TZ}
    ports:
      - "5601:5601"
    networks: [transcendence]
    restart: unless-stopped

networks:
  transcendence:
    name: transcendence

volumes:
  elasticsearch_data:
  kibana_data:
  grafana_data:
  prometheus_data:
  nginx_logs:
  nginx_certs:
