# ---------- Global log format definition ----------
log_format combined_json escape=json '{'
  '"time_local":"$time_local",'
  '"remote_addr":"$remote_addr",'
  '"request":"$request",'
  '"status":$status,'
  '"body_bytes_sent":$body_bytes_sent,'
  '"http_referer":"$http_referer",'
  '"http_user_agent":"$http_user_agent",'
  '"request_time":$request_time,'
  '"upstream_response_time":"$upstream_response_time",'
  '"upstream_addr":"$upstream_addr",'
  '"host":"$host"'
'}';


# ---------- Internal server for metrics scraping ----------
server {
    listen 8080;
    server_name 127.0.0.1 localhost;

    # NGINX stub status (no auth; internal network only)
    location /stub_status {
        stub_status;
        access_log off;
        allow 127.0.0.1;
        allow 172.16.0.0/12;   # docker default ranges
        allow 10.0.0.0/8;
        allow 192.168.0.0/16;
        deny all;
    }
}

# ---------- Public HTTPS reverse proxy ----------
server {
    listen 443 ssl http2;
    server_name localhost;

    ssl_certificate /etc/nginx/ssl/inception.crt;
    ssl_certificate_key /etc/nginx/ssl/inception.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # JSON logs (better for Logstash)
    access_log /var/log/nginx/access.json combined_json;
    error_log  /var/log/nginx/error.log warn;

    # React frontend
    location / {
        proxy_pass http://client:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # API backend
    location /api {
        proxy_pass http://server:4000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # WebSocket servers
    location /ws {
        proxy_pass http://server:9090;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location /ws-fastify {
        proxy_pass http://server:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Optional: protect Kibana and Grafana behind Nginx paths
    location /kibana/ {
        proxy_pass http://kibana:5601/;
    }
    location /grafana/ {
        proxy_pass http://grafana:3000/;
    }
}

server {
    listen 80;
    server_name localhost;
    return 301 https://$host$request_uri;
}
